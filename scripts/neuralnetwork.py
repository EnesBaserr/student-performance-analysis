# -*- coding: utf-8 -*-
"""NeuralNetwork.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NyPjbkgmT8n7bcUjbob4yu6MQ6DTvUuK
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Input


data = pd.read_csv("data/student_performance_data.csv")

data.fillna(data.mean(), inplace=True)

X = data.drop('Exam_Score', axis=1)
y = data['Exam_Score']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = Sequential([
    Input(shape=(X_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(1) 
])

model.compile(optimizer='adam', loss='mse', metrics=['mae'])

history = model.fit(X_train, y_train, epochs=50, validation_split=0.2, batch_size=32)

loss, mae = model.evaluate(X_test, y_test)
print(f"Mean Absolute Error on Test Set: {mae}")

new_data_test = pd.DataFrame(X_test).sample(n=1, random_state=42) 

selected_index = new_data_test.index[0]
actual_exam_score = y_test.iloc[selected_index]

predicted_score = model.predict(new_data_test)

y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print(f"Actual Exam Score: {actual_exam_score}")
print(f"Predicted Exam Score: {predicted_score[0][0]}")
print(f"R² Score on the Test Set: {r2}")

threshold = 2

errors = np.abs(y_test - y_pred.flatten())

accuracy_within_threshold = np.mean(errors <= threshold) * 100

print(f"Percentage of predictions within ±{threshold} points of actual scores: {accuracy_within_threshold:.2f}%")


plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--k')
plt.xlabel('Actual Exam Score')
plt.ylabel('Predicted Exam Score')
plt.title('Predicted vs Actual Exam Scores on Test Set')
plt.show()